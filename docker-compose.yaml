services:

  let-me-ask-redis:
    container_name: let-me-ask-redis
    image: redis:7.4-alpine 
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - let-me-ask-network

  let-me-ask-db:
    container_name: let-me-ask-db
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: letMeAsk
    ports:
      - 5432:5432
    volumes:
      - ./docker/setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - 'let-me-ask-db-data:/var/lib/postgresql/data'
    healthcheck: # Adicione isto para um healthcheck robusto
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - let-me-ask-network

  let-me-ask-service:
    container_name: let-me-ask-service
    image: talison737/nlw-agents-server:609ab77
    environment:
      - PORT=3333
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://docker:docker@let-me-ask-db:5432/letMeAsk
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://let-me-ask-redis:6379
    depends_on:
      let-me-ask-db:
        condition: service_healthy
      let-me-ask-redis:
        condition: service_started
    networks:
    - let-me-ask-network

  let-me-ask-webapp:
    container_name: let-me-ask-webapp
    image: talison737/nlw-agents-webapp:6e6fd83
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    networks:
    - let-me-ask-network

  # Serviço NGINX como proxy reverso
  nginx:
    image: nginx:latest
    ports:
      - "80:80"  # HTTP
      - "443:443" # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot-etc:/etc/letsencrypt # Onde o Certbot guarda os certificados
      - certbot-var:/var/lib/letsencrypt # Onde o Certbot guarda dados internos
      - webroot-data:/var/www/certbot # Para os arquivos de desafio do Certbot
    depends_on:
      - let-me-ask-service
      - let-me-ask-webapp
    networks:
      - let-me-ask-network


  certbot-web:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - webroot-data:/var/www/certbot
    # O comando é executado UMA VEZ para obter os certificados iniciais
    # command: certonly --webroot -w /var/www/certbot --force-renewal --email talison737@gmail.com -d let-me-ask.faraujo.com --rsa-key-size 4096 --agree-tos --no-eff-email -v
    # commando para renovar o certificado a cada 12h
    command: 'sh -c "trap exit TERM; while :; do certbot renew; sleep 1h & wait $${!}; done;"'
    networks:
      - let-me-ask-network

  certbot-api:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - webroot-data:/var/www/certbot
    # O comando inicial
    # command: certonly --webroot -w /var/www/certbot --force-renewal --email talison737@gmail.com -d api-let-me-ask.faraujo.com --rsa-key-size 4096 --agree-tos --no-eff-email -v
    # commando para renovar o certificado a cada 12h
    command: 'sh -c "trap exit TERM; while :; do certbot renew; sleep 1h & wait $${!}; done;"'
    networks:
      - let-me-ask-network

networks:
  let-me-ask-network:
    driver: bridge

volumes:
  certbot-etc:
  certbot-var:
  webroot-data:
  redis_data:
  let-me-ask-db-data:
